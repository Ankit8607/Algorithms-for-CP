/*
Find the kth minimum from a given array of elements using the method of “median of medians”.
*/

#include<iostream>
#include<algorithm>
#include<climits>
using namespace std;

int partition(intarr[], int l, int r, int k);

intfindMedian(intarr[], int n)
{
    sort(arr, arr+n);  
    return arr[n/2];  
}
intkthSmallest(intarr[], int l, int r, int k)
{
    if (k > 0 && k <= r - l + 1)
    {
int n = r-l+1; 

inti, median[(n+4)/5]; 
        for (i=0; i<n/5; i++)
            median[i] = findMedian(arr+l+i*5, 5);
        if (i*5 < n) 
        {
            median[i] = findMedian(arr+l+i*5, n%5); 
i++;
        }    

intmedOfMed = (i == 1)? median[i-1]:
kthSmallest(median, 0, i-1, i/2);

intpos = partition(arr, l, r, medOfMed);

        if (pos-l == k-1)
            return arr[pos];

        if (pos-l > k-1) 
            return kthSmallest(arr, l, pos-1, k);

        return kthSmallest(arr, pos+1, r, k-pos+l-1);
    }
    return INT_MAX;
}

void swap(int *a, int *b)
{
int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(intarr[], int l, int r, int x)
{
inti;
    for (i=l; i<r; i++)
        if (arr[i] == x)
           break;
    swap(&arr[i], &arr[r]);

i = l;
    for (int j = l; j <= r - 1; j++)
    {
        if (arr[j] <= x)
        {
            swap(&arr[i], &arr[j]);
i++;
        }
    }
    swap(&arr[i], &arr[r]);
    return i;
}


int main()
{
	int n , k ;
	cin>>n>>k;
intarr[n];
    for(inti=0;i<n;i++)
cin>>arr[i];

cout<< k<<"th smallest element is "
<<kthSmallest(arr, 0, n-1, k);
    return 0;
}

Output:
6 4
21 52 44 85 36 54
4th smallest element is 52
